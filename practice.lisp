;; emphasize.lisp
(defun emphasize (x)
	(cond 
		((equal (first x) 'good) (cons 'great (rest x)))
		((equal (first x) 'bad) (cons 'awful (rest x)))
		(t x)
	)
)
(defun compute (op x y)
	(cond 
		((equal op 'sum) (+ x y))
		((equal op 'prod) (* x y))
		(t '(does not compute))
	)
)
(defun emp3 (x)
	(cond 
		((equal (first x) 'good) (cons 'perfect (rest x)))
		((equal (first x) 'bad) (cons 'awful (rest x)))
		(t (cons 'very x))
	)
)
;; This functions takes three inputs (x, min, max). If x is less
;; than min, it returns min; if x is greater that max, it returns
;; max. Else, it returns x;
(defun cs (x max min)
	(cond 
		((> x max) max)
		((< x min) min)
		(t	x )
	)) 
;; This functions takes a list of three numbers as input and 
;; returns a word indicating wher thr first zero appears.
(defun fz (x)
	(cond 
		((equal 0 (first x)) 'first)
		((equal 0 (second x)) 'second)
		((equal 0 (third x)) 'third)
		(t 'none )
	)) 
(defun cycle (x)
	(cond 
		((equal x 99) 1)
		(t (+ x 1))
	)
)
(defun alike (a b)
	(cond 
		((equal a b) 'the-same)
		((and (oddp a) (oddp b)) 'both-odd)
		((and (evenp a) (evenp b)) 'both-even)
		((and (< a 0) (< b 0)) 'both-negative)
		(t 'not-alike)
	)
)
(defun GEQ (a b)
	(cond 
		((>= a b) t)
	)
)
(defun weird (x)
	(cond 
		((and (oddp x) (> x 0)) (* x x))
		((and (oddp x) (< x 0)) (* x 2))
		(t (/ x 2))
	)
)
(defun boygirl (x y)
	(cond 
		((and (or (equal x 'boy) (equal x 'girl)) (equal y 'child)) t)
		((and (or (equal x 'man) (equal x 'woman)) (equal y 'adult)) t)
		(t nil)
	)
)
;; rock, paper, scissors
(defun PLAY (a b)
	(cond
		((and (equal a 'rock) (equal b 'scissors)) 'a-wins)
		((and (equal a 'paper) (equal b 'rock)) 'a-wins)
		((and (equal a 'scissors) (equal b 'paper)) 'a-wins)
		((and (equal b 'rock) (equal a 'scissors)) 'b-wins)
		((and (equal b 'paper) (equal a 'rock)) 'b-wins)
		((and (equal b 'scissors) (equal a 'paper)) 'b-wins)
		((equal a b) 'tie)
	)
)
(defun posn2 (x)
	(if (numberp x) (> x 0) 'not-a-number)
)
(defun posn3 (x)
	(cond 
		((numberp x) (> x 0))
		(t nil)
	)	
)
(defun and-conds (x y)
	(cond 
		(x y)
		(t nil)
	)
)
(defun average (x y)
	"Returns the mean of x and y inputs."
	(let ((sum (+ x y)))
	(list x y 'average 'is (/ sum 2.0))
	)
)
(defun lettest (x)
	(let 
		((star (first x)))
		(list 'staring star)
	)
(defun faultylet (x)
	(let*
		((one (first x))
		(two (second one)))
		two
	)
)
(defun cointoss ()
	(let ((toss (random 101))
		 (foo (list '(of course))))
		(cond 
			((< toss 50) (cons 'heads foo))
			((> toss 50) (cons 'tails foo)) 
			(t 'edge)
		)
	)
)
(defun throw-die ()
	(+ 1 (random 6))	
)
(defun throw-dice ()
	(list (throw-die) (throw-die))
)
(defun snake-eys-p (x)
	(and (equal 1 (first x)) (equal 1 (second x)))
)
(defun boxcars-p (x)
	(and (equal 6 (first x)) (equal 1 (second x)))
)
(defun instant-win-p (x)
	(or
	(equal 7 (+ (first x) (second x)))
	(equal 11 (+ (first x) (second x))))
)
(defun instant-loss-p (x)
	(or
	(equal 2 (+ (first x) (second x)))
	(equal 3 (+ (first x) (second x)))
	(equal 12 (+ (first x) (second x))))
)
(defun say-throw (x)
	(cond 
		((equal 2 (+ (first x) (second x))) 'snake-eyes)
		((equal 12 (+ (first x) (second x))) 'boxcars)
		(t (+ (first x) (second x)))
	)
)
(defun craps ()
	(let
		((rv (throw-dice)))
		(cond 
			((instant-win-p rv)
				(list 'throw rv (say-throw rv) 'you-win))
			((instant-loss-p rv)
				(list 'throw rv (say-throw rv) 'you-lose))
			(t
				(list 'throw rv 'your-point-is (say-throw rv)))
		)
	)
)
(defun try-for-point (x)
	(let
		((rv (throw-dice)))
		(cond 
			((equal 7 (+ (first rv) (second rv)))
				(list 'throw rv (say-throw rv) '--you-lose))
			((equal x (+ (first rv) (second rv)))
				(list 'throw rv (say-throw rv) '--you-win))
			(t
				(list 'throw rv (say-throw rv) '--throw-again))
		)
	)
)
(defun allbutlast (x)
	(reverse (cdr (reverse x)))
)
(defun palindromp (x)
	(if (equal x (reverse x))
		t
		nil
	)
)
(defun make-palindrom (x)
	(append x (reverse x))
)
(setf ducks '(huey dewey louie))
(member 'huey ducks)
(member 'dewey ducks)
(member 'louie ducks)
(member 'mickey ducks)
(defun contains-article-p (x)
	(cond 
		((intersection '(the) x) t)
		((intersection '(a) x) t)
		((intersection '(an) x) t)
		(t nil)
	)
)
(defun add-vowels (x)
	(union x '(a e i o u))
)
(defun titlep (name)
	(member (first name) '(mr ms miss mrs))
)
(setf male-names '(john kim richard fred george))
(setf female-names '(jane mary wanda barbara kim))
(defun malep (x)
	(and (member x male-names)
		(not (member x female-names))
	)
)
(defun femalep (x)
	(and (member x female-names)
		(not (member x male-names))
	)
)
(defun give-title (x)
	"Returns a name with title added onto the front"
	(cond 
		((titlep x) (x))
		((malep (first x)) (cons 'mr x))
		((femalep (first x) (cons 'ms x))
		(t (append '(mr or ms) x))
	))
)
(defun right-side (x)
	(cdr (member '-vs- x))
)
(defun left-side (x)
	(cdr (member '-vs- (reverse x)))
)
(defun count-common (x)
	(length (intersection (left-side x) (right-side x)))
)
(defun compare (x)
	(intersection (left-side x) (right-side x))
)
(setf words
	'(( one un)
	(two deux)
	(three trois)
	(four quatre)
	(five cinq)
	)
)
(setf sounds
	'((cow . moo)
	(pig . oink)
	(cat . moew)
	(dog . woof)
	(bird . tweet)
	)
)
(setf things
	'((o1 large green shiny cube)
	(o2 small red dull metal cube)
	(o3 red small dull plastic cube)
	(o4 small dull blue metal cube)
	(o5 small shiny red four-sided pyramid)
	(o6 large shiny green sphere)
	)
)
(defun desc (o)
	(rest (assoc o things))
)
(defun differences (a b)
	(set-exclusive-or (desc a) (desc b))
)
(setf quality-table
  '((large	. size)
	(small  . size)
	(red	. color)
	(green  . color)
	(blue  . color)
	(shiny  . luster)
	(dull  . luster)
	(metal  . material)
	(plastic  . material)
	(cube  . shape)
	(sphere  . shape)
	(pyramid  . shape)
	(four-side  . shape)
 )
)
(defun quality (x)
	(cdr (assoc x quality-table))
)
(defun quality-diff (oa ob)
	(quality (first(differences oa ob)))
)
(setf BOOKS 
	'((the-code-book   	. simon-singh)
	  (it				. stephen-king)
	  (the-shinning		. stephen-king)
	  (the-da-vinci-code. dan-brown)
	  (the-hound-of-the-baskervilles . arthur-conan-doyle)
	)
)
(defun who-wrote (book)
	(cdr (assoc book books))
)

(setf NERD-STATES
  '((sleeping				. eating)
	(eating					. waiting-for-a-computer)
	(waiting-for-a-computer . programming)
	(programming			. debugging)
	(debugging				. sleeping)
  )
)
(defun NERDUS (x)
	(cdr (assoc x NERD-STATES))
)
(defun SLEEPLESS-NERD (x)
	(if (equal (NERDUS x) 'sleeping)
		'eating
		(NERDUS x)
	) 
)
(defun NERD-ON-CAFFINE (x)
	(NERDUS (NERDUS x))
)
(setf message 
	'(bill jones sent me an itemized bill for the tires)
)
(subst 'fred 'bill message)
(defun ROYAL_WE (x)
	(subst 'we 'i x)
)
(setf royal
'(if i learn lisp i will be pleased)
)
(defun addtoend1 (x y)
	(append x (list y))
)
(setf x '(a b c))
(setf y (cons 'd (cdr x)))
(setf x1 '(a b c))
(setf x2 '(a b c))
(defun translate (x)
	(second (assoc x words))
)
(defun add1 (x)
	(+ x 1)
)
(setf DAILY_PLANET
'((olsen jimmy 123-76-4535 cub-reporter)
(kent clark 089-52-6787 reporter)
(lane lois 951-26-1438 reporter)
(white perry 355-16-7439 editor))
)
(mapcar #'zerop'(2 0 3 4 0 -5 -6))
((defun gt5-p (x)
	(> x 5)
))
(mapcar #'(lambda (n) (* n n)) '(1 2 3 4 5 6))
(mapcar #'(lambda (n) (* n 10)) '(1 2 3 4 5 6))
(mapcar #'(lambda (x) (list 'hi 'there x)) '(alice bob charlie))
((lambda (n) (- n 17))20)
(mapcar #'(lambda (e) (cond 
	((equal e 'up) 'down)
	(t 'up)
)) '(up down))
(find-if #'oddp '(2 6 7 8 9))
(defun lookup (key table)
	(find-if #'(lambda (e) (equal key (first e))) table) 
)
(remove-if #'numberp '(2 for 1 sale))
(remove-if #'oddp '(1 2 3 4 5 6 7 8))
(remove-if #'(lambda (x) (< x 0)) '(-2 -1 0 1 2))
(remove-if-not #'plusp '(2 0 -4 6 -8 10))
(remove-if-not #'zerop '(2 0 -4 6 -8 10))
(defun count-zeros (x)
	(length (remove-if-not #'zerop x))
)
(defun RANK (hand)
	(first hand)
)
(defun SUIT (hand)
	(last hand)
)
(setf My-HAND
'((3 hearts)
(5 clubs)
(2 diamonds)
(4 diamonds)
(ace spades)
))
(defun count-suit (x hand)
	(length (remove-if-not #'x hand)) 
)
(defun all-odd (x)
	(every #'oddp x)
)
(defun not-all-odd (x)
	(not (every #'oddp x))
)
(defun half (n)
	(* n 0.5)
)
(defun average (x y)
	(+ (half x) (half y))
)
(defun ANYODD (x)
	(cond 
		((null x) nil)
		((oddp (first x)) t)
		(t (ANYODD (rest x)))
	)
)